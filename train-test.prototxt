name: "LeelaNet"
layer {
  type: "Data"
  name: "data"
  # outputs
  top: "data"
  include {
    phase: TRAIN
  }
  data_param {
    source: "leela_train"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  type: "Data"
  name: "data"
  # outputs
  top: "data"
  include {
    phase: TEST
  }
  data_param {
    source: "leela_test"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  type: "Data"
  name: "label"
  # outputs
  top: "label_unsliced"
  include {
    phase: TRAIN
  }
  data_param {
    source: "leela_train_label"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  type: "Data"
  name: "label"
  # outputs
  top: "label_unsliced"
  include {
    phase: TEST
  }
  data_param {
    source: "leela_test_label"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  name: "slicer_label"
  type: "Slice"
  bottom: "label_unsliced"
  top: "label_move1"
  top: "label_move2"
  top: "label_move3"
  top: "winpc"
  top: "won"
  slice_param {
    axis: 1
    slice_point: 1
    slice_point: 2
    slice_point: 3
    slice_point: 4
  }
}

layer {
  name: "silence"
  type: "Silence"
  bottom: "winpc"
  bottom: "label_move1"
  bottom: "label_move2"
  bottom: "label_move3"
}

layer {
  name: "conv1"
  type: "Convolution"
  # input -> output
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 32
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu1"
  type: "ELU"
  # in-place
  bottom: "conv1"
  top: "conv1"
}

layer {
  name: "conv2"
  type: "Convolution"
  # input -> output
  bottom: "conv1"
  top: "conv2"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu2"
  type:  "ELU"
  # in-place
  bottom: "conv2"
  top: "conv2"
}

layer {
  name: "conv3"
  type: "Convolution"
  # input -> output
  bottom: "conv2"
  top: "conv3"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu3"
  type: "ELU"
  # in-place
  bottom: "conv3"
  top: "conv3"
}

layer {
  name: "conv4"
  type: "Convolution"
  # input -> output
  bottom: "conv3"
  top: "conv4"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu4"
  type: "ELU"
  # in-place
  bottom: "conv4"
  top: "conv4"
}

layer {
  name: "conv5"
  type: "Convolution"
  # input -> output
  bottom: "conv4"
  top: "conv5"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu5"
  type: "ELU"
  # in-place
  bottom: "conv5"
  top: "conv5"
}

layer {
  name: "conv6"
  type: "Convolution"
  # input -> output
  bottom: "conv5"
  top: "conv6"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu6"
  type: "ELU"
  # in-place
  bottom: "conv6"
  top: "conv6"
}

layer {
  name: "conv7"
  type: "Convolution"
  # input -> output
  bottom: "conv6"
  top: "conv7"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu7"
  type: "ELU"
  # in-place
  bottom: "conv7"
  top: "conv7"
}

layer {
  name: "conv8"
  type: "Convolution"
  # input -> output
  bottom: "conv7"
  top: "conv8"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu8"
  type: "ELU"
  # in-place
  bottom: "conv8"
  top: "conv8"
}

layer {
  name: "conv9"
  type: "Convolution"
  # input -> output
  bottom: "conv8"
  top: "conv9"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu9"
  type: "ELU"
  # in-place
  bottom: "conv9"
  top: "conv9"
}

layer {
  name: "conv10"
  type: "Convolution"
  # input -> output
  bottom: "conv9"
  top: "conv10"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu10"
  type: "ELU"
  # in-place
  bottom: "conv10"
  top: "conv10"
}

layer {
  name: "conv11"
  type: "Convolution"
  # input -> output
  bottom: "conv10"
  top: "conv11"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu11"
  type: "ELU"
  # in-place
  bottom: "conv11"
  top: "conv11"
}

layer {
  name: "conv12"
  type: "Convolution"
  # input -> output
  bottom: "conv11"
  top: "conv12"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu12"
  type: "ELU"
  # in-place
  bottom: "conv12"
  top: "conv12"
}

layer {
  name: "conv13"
  type: "Convolution"
  # input -> output
  bottom: "conv12"
  top: "conv13"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu13"
  type: "ELU"
  # in-place
  bottom: "conv13"
  top: "conv13"
}

layer {
  name: "conv14"
  type: "Convolution"
  # input -> output
  bottom: "conv13"
  top: "conv14"
  convolution_param {
    num_output: 1
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "elu14"
  type: "ELU"
  # in-place
  bottom: "conv14"
  top: "conv14"
}

layer {
  name: "ip15"
  type: "InnerProduct"
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "conv14"
  top: "ip15"
}

layer {
  name: "elu15"
  type: "ELU"
  # in-place
  bottom: "ip15"
  top: "ip15"
}

layer {
  name: "ip16"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "ip15"
  top: "ip16"
}

layer {
  name: "sigmoid"
  type: "Sigmoid"
  bottom: "ip16"
  top: "winrate"
  include { phase: TEST }
}

layer {
  name: "loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "ip16"
  bottom: "won"
  top: "ce_loss"
  loss_weight: 1
}

layer {
  name: "loss_ec"
  type: "EuclideanLoss"
  bottom: "winrate"
  bottom: "won"
  top: "mse_loss"
  loss_weight: 0
  include { phase: TEST }
}
