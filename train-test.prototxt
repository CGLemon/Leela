name: "LeelaNet"
layer {
  type: "Data"
  name: "data"
  # outputs
  top: "data"
  include {
    phase: TRAIN
  }
  data_param {
    source: "leela_train"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  type: "Data"
  name: "data"
  # outputs
  top: "data"
  include {
    phase: TEST
  }
  data_param {
    source: "leela_test"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  type: "Data"
  name: "label"
  # outputs
  top: "label_unsliced"
  include {
    phase: TRAIN
  }
  data_param {
    source: "leela_train_label"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  type: "Data"
  name: "label"
  # outputs
  top: "label_unsliced"
  include {
    phase: TEST
  }
  data_param {
    source: "leela_test_label"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  name: "slicer_label"
  type: "Slice"
  bottom: "label_unsliced"
  top: "winpc"
  top: "won"
  slice_param {
    axis: 1
    slice_point: 1
  }
}

layer {
  name: "silence"
  type: "Silence"
  bottom: "winpc"
}

layer {
  name: "conv1"
  type: "Convolution"
  # input -> output
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 32
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  # in-place
  bottom: "conv1"
  top: "conv1"
}

layer {
 name: "bn1"
 type: "BatchNorm"
 bottom: "conv1"
 top: "bn1"
}

layer {
  name: "conv2"
  type: "Convolution"
  # input -> output
  bottom: "bn1"
  top: "conv2"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu2"
  type:  "ReLU"
  # in-place
  bottom: "conv2"
  top: "conv2"
}
layer {
 name: "bn2"
 type: "BatchNorm"
 bottom: "conv2"
 top: "bn2"
}

layer {
  name: "conv3"
  type: "Convolution"
  # input -> output
  bottom: "bn2"
  top: "conv3"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu3"
  type: "ReLU"
  # in-place
  bottom: "conv3"
  top: "conv3"
}
layer {
 name: "bn3"
 type: "BatchNorm"
 bottom: "conv3"
 top: "bn3"
}

layer {
  name: "conv4"
  type: "Convolution"
  # input -> output
  bottom: "bn3"
  top: "conv4"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu4"
  type: "ReLU"
  # in-place
  bottom: "conv4"
  top: "conv4"
}
layer {
 name: "bn4"
 type: "BatchNorm"
 bottom: "conv4"
 top: "bn4"
}

layer {
  name: "conv5"
  type: "Convolution"
  # input -> output
  bottom: "bn4"
  top: "conv5"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu5"
  type: "ReLU"
  # in-place
  bottom: "conv5"
  top: "conv5"
}
layer {
 name: "bn5"
 type: "BatchNorm"
 bottom: "conv5"
 top: "bn5"
}

layer {
  name: "conv6"
  type: "Convolution"
  # input -> output
  bottom: "bn5"
  top: "conv6"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu6"
  type: "ReLU"
  # in-place
  bottom: "conv6"
  top: "conv6"
}
layer {
 name: "bn6"
 type: "BatchNorm"
 bottom: "conv6"
 top: "bn6"
}

layer {
  name: "conv7"
  type: "Convolution"
  # input -> output
  bottom: "bn6"
  top: "conv7"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu7"
  type: "ReLU"
  # in-place
  bottom: "conv7"
  top: "conv7"
}
layer {
 name: "bn7"
 type: "BatchNorm"
 bottom: "conv7"
 top: "bn7"
}

layer {
  name: "conv8"
  type: "Convolution"
  # input -> output
  bottom: "bn7"
  top: "conv8"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu8"
  type: "ReLU"
  # in-place
  bottom: "conv8"
  top: "conv8"
}
layer {
 name: "bn8"
 type: "BatchNorm"
 bottom: "conv8"
 top: "bn8"
}

layer {
  name: "conv9"
  type: "Convolution"
  # input -> output
  bottom: "bn8"
  top: "conv9"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu9"
  type: "ReLU"
  # in-place
  bottom: "conv9"
  top: "conv9"
}
layer {
 name: "bn9"
 type: "BatchNorm"
 bottom: "conv9"
 top: "bn9"
}

layer {
  name: "conv10"
  type: "Convolution"
  # input -> output
  bottom: "bn9"
  top: "conv10"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu10"
  type: "ReLU"
  # in-place
  bottom: "conv10"
  top: "conv10"
}
layer {
 name: "bn10"
 type: "BatchNorm"
 bottom: "conv10"
 top: "bn10"
}

layer {
  name: "conv11"
  type: "Convolution"
  # input -> output
  bottom: "bn10"
  top: "conv11"
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu11"
  type: "ReLU"
  # in-place
  bottom: "conv11"
  top: "conv11"
}
layer {
 name: "bn11"
 type: "BatchNorm"
 bottom: "conv11"
 top: "bn11"
}

layer {
  name: "conv12"
  type: "Convolution"
  # input -> output
  bottom: "bn11"
  top: "conv12"
  convolution_param {
    num_output: 1
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu12"
  type: "ReLU"
  # in-place
  bottom: "conv12"
  top: "conv12"
}

layer {
 name: "bn12"
 type: "BatchNorm"
 bottom: "conv12"
 top: "bn12"
}

layer {
  name: "ip13"
  type: "InnerProduct"
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "bn12"
  top: "ip13"
}

layer {
  name: "relu13"
  type: "ReLU"
  # in-place
  bottom: "ip13"
  top: "ip13"
}

layer {
 name: "bn13"
 type: "BatchNorm"
 bottom: "ip13"
 top: "bn13"
}

layer {
  name: "ip14"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  bottom: "bn13"
  top: "ip14"
}

layer {
  name: "tanh"
  type: "TanH"
  bottom: "ip14"
  top: "winrate"
}

layer {
  name: "mse_loss"
  type: "EuclideanLoss"
  bottom: "winrate"
  bottom: "won"
}
