name: "LeelaNet"
layer {
  type: "Data"
  name: "data"
  # outputs
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  data_param {
    source: "leela_train"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  type: "Data"
  name: "data"
  # outputs
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  data_param {
    source: "leela_test"
    batch_size: 128
    backend: LEVELDB
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  # input -> output
  bottom: "data"
  top: "conv1"
  # learning rate and decay multipliers for the filters
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  # in-place
  bottom: "conv1"
  top: "conv1"
}

layer {
  name: "bn1"
  type: "BatchNorm"
  bottom: "conv1"
  top: "bn1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  # input -> output
  bottom: "bn1"
  top: "conv2"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu2"
  type:  "ReLU"
  # in-place
  bottom: "conv2"
  top: "conv2"
}

layer {
  name: "bn2"
  type: "BatchNorm"
  bottom: "conv2"
  top: "bn2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "conv3"
  type: "Convolution"
  # input -> output
  bottom: "bn2"
  top: "conv3"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu3"
  type: "ReLU"
  # in-place
  bottom: "conv3"
  top: "conv3"
}

layer {
  name: "bn3"
  type: "BatchNorm"
  bottom: "conv3"
  top: "bn3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "conv4"
  type: "Convolution"
  # input -> output
  bottom: "bn3"
  top: "conv4"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "relu4"
  type: "ReLU"
  # in-place
  bottom: "conv4"
  top: "conv4"
}

layer {
  name: "bn4"
  type: "BatchNorm"
  bottom: "conv4"
  top: "bn4"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "conv5"
  type: "Convolution"
  # input -> output
  bottom: "bn4"
  top: "conv5"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 1
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
    }
  }
}

layer {
  name: "flatten"
  type: "Flatten"
  bottom: "conv5"
  top: "flatten"
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  # input
  bottom: "flatten"
  bottom: "label"
  # output
  top: "loss"
}

layer {
  name: "accuracy"
  type: "Accuracy"
  # input
  bottom: "flatten"
  bottom: "label"
  include {
    phase: TEST
  }
  # output
  top: "accuracy"
}
